ts_data <- ts(Monthly_data$Attendence, start = c(2009,9), frequency = 12)
library(readxl)
Monthly_data <- read_excel("PretendCity Daily Attendence.xlsx",
sheet = "Monthly")
ts_data <- ts(Monthly_data$Attendence, start = c(2009,9), frequency = 12)
plot(ts_data, ylab="Monthly Attendence", xlab="Time (Month)")
plot(diff(log(ts_data)), ylab="Monthly attendence growth rate")
acf(ts_data, lag.max = 90)
pacf(ts_data, lag.max = 90)
t <- (seq(2009, 2019.1,length=length(ts_data)))
typeof(t)
lin_fit = tslm(ts_data~t)
ts_data <- ts(Monthly_data$Attendence, start = c(2009,9), frequency = 12)
plot(ts_data, ylab="Monthly Attendence", xlab="Time (Month)")
plot(diff(log(ts_data)), ylab="Monthly attendence growth rate")
acf(ts_data, lag.max = 90)
pacf(ts_data, lag.max = 90)
library(forecast)
t <- (seq(2009, 2019.1,length=length(ts_data)))
typeof(t)
lin_fit = tslm(ts_data~t)
quad_fit=tslm(ts_data~t+I(t^2))
trend_fit=tslm(ts_data~trend)
par(mfrow=c(2,1))
plot(ts_data, xlab="Month", lwd=2, col='skyblue3', xlim=c(2009,2019))
lines(t,lin_fit$fit,col="red3",lwd=2)
plot(ts_data, xlab="Month", lwd=2, col='skyblue3', xlim=c(2009,2019))
lines(t,quad_fit$fit,col="red3",lwd=2)
plot(ts_data, xlab="Month", lwd=2, col='skyblue3', xlim=c(2009,2019))
lines(t,trend_fit$fit,col="red3",lwd=2)
plot(lin_fit$fitted.values,lin_fit$res, ylab="Residuals",xlab="Fitted Values", main = "Fitted vs Residuals of Linear Fit")
abline(h=0,lwd=2,col = "red3")
plot(quad_fit$fitted.values,quad_fit$res, ylab="Residuals",xlab="Fitted Values", main = "Fitted vs Residuals of Quadratic Fit")
abline(h=0,lwd=2,col = "red3")
par(mfrow=c(2,1))
hist(lin_fit$res,15,col="skyblue3",xlab="Residuals",ylab="Fraction",main="Histogram of Residuals for Linear Model")
hist(quad_fit$res,15,col="skyblue3",xlab="Residuals",ylab="Fraction",main="Histogram of Residuals for Quadratic Model")
summary(lin_fit)
summary(quad_fit)
AIC(lin_fit,quad_fit)
BIC(lin_fit,quad_fit)
quad_fit_forecast <- forecast(quad_fit, h = 16, level = c(90,95))
season_fit <- tslm(ts_data ~ season)
summary(season_fit)
plot(ts_data, xlab="Month", lwd=2, col='skyblue3', xlim=c(2009,2019))
lines(season_fit$fit,col="red3",lwd=2)
full_fit <- tslm(ts_data ~ season + t + I(t^2))
plot(full_fit$fitted.values,full_fit$res, pch = 20, ylab="Residuals",xlab="Fitted", main = "Fitted vs Residuals of Full Fit")
abline(h=0,lwd=2,col = "red3")
summary(full_fit)
accuracy(full_fit)
accuracy(season_fit)
full_fit_forecast <- forecast(full_fit, h = 16, level = c(90,95))
library(forecast)
t <- (seq(2009, 2019.1,length=length(ts_data)))
typeof(t)
lin_fit = tslm(ts_data~t)
quad_fit=tslm(ts_data~t+I(t^2))
trend_fit=tslm(ts_data~trend)
par(mfrow=c(3,1))
plot(ts_data, xlab="Month", lwd=2, col='skyblue3', xlim=c(2009,2019))
lines(t,lin_fit$fit,col="red3",lwd=2)
plot(ts_data, xlab="Month", lwd=2, col='skyblue3', xlim=c(2009,2019))
lines(t,quad_fit$fit,col="red3",lwd=2)
plot(ts_data, xlab="Month", lwd=2, col='skyblue3', xlim=c(2009,2019))
lines(t,trend_fit$fit,col="red3",lwd=2)
par(mfrow=c(2,1))
AIC(lin_fit,quad_fit)
BIC(lin_fit,quad_fit)
par(mfrow=c(2,1))
plot(as.vector(fitted(lin_fit)),as.vector(residuals(lin_fit)), ylab="Residuals",xlab="Fitted Values", main = "Fitted vs Residuals of Linear Fit")
abline(h=0,lwd=2,col = "red3")
plot(as.vector(fitted(quad_fit)),as.vector(residuals(quad_fit)), ylab="Residuals",xlab="Fitted Values", main = "Fitted vs Residuals of Quadratic Fit")
abline(h=0,lwd=2,col = "red3")
full_fit <- tslm(ts_data ~ season + t + I(t^2))
plot(as.vector(fitted(full_fit)),as.vector(residuals(full_fit)), pch = 20, ylab="Residuals",xlab="Fitted", main = "Fitted vs Residuals of Full Fit")
abline(h=0,lwd=2,col = "red3")
ts_data <- ts(Monthly_data$Attendence, start = c(2009,9), frequency = 12)
plot(ts_data, ylab="Monthly Attendence", xlab="Time (Month)")
plot(diff(log(ts_data)), ylab="Monthly attendence growth rate")
acf(ts_data, lag.max = 90)
pacf(ts_data, lag.max = 90)
library(forecast)
t <- seq(2009, 2019.1,length=length(ts_data))
lin_fit = tslm(ts_data~t)
quad_fit=tslm(ts_data~t+I(t^2))
trend_fit=tslm(ts_data~trend)
par(mfrow=c(3,1))
plot(ts_data, xlab="Month", lwd=2, col='skyblue3', xlim=c(2009,2019))
lines(t,lin_fit$fit,col="red3",lwd=2)
plot(ts_data, xlab="Month", lwd=2, col='skyblue3', xlim=c(2009,2019))
lines(t,quad_fit$fit,col="red3",lwd=2)
plot(ts_data, xlab="Month", lwd=2, col='skyblue3', xlim=c(2009,2019))
lines(t,trend_fit$fit,col="red3",lwd=2)
par(mfrow=c(2,1))
plot(as.vector(fitted(lin_fit)),as.vector(residuals(lin_fit)), ylab="Residuals",xlab="Fitted Values", main = "Fitted vs Residuals of Linear Fit")
abline(h=0,lwd=2,col = "red3")
plot(as.vector(fitted(quad_fit)),as.vector(residuals(quad_fit)), ylab="Residuals",xlab="Fitted Values", main = "Fitted vs Residuals of Quadratic Fit")
abline(h=0,lwd=2,col = "red3")
par(mfrow=c(2,1))
hist(lin_fit$res,15,col="skyblue3",xlab="Residuals",ylab="Fraction",main="Histogram of Residuals for Linear Model")
hist(quad_fit$res,15,col="skyblue3",xlab="Residuals",ylab="Fraction",main="Histogram of Residuals for Quadratic Model")
summary(lin_fit)
summary(quad_fit)
AIC(lin_fit,quad_fit)
BIC(lin_fit,quad_fit)
library(forecast)
summary(lin_fit)
summary(quad_fit)
library(forecast)
t <- seq(2009, 2019.1,length=length(ts_data))
lin_fit = tslm(ts_data~t)
quad_fit=tslm(ts_data~t+I(t^2))
trend_fit=tslm(ts_data~trend)
par(mfrow=c(3,1))
plot(ts_data, xlab="Month", lwd=2, col='skyblue3', xlim=c(2009,2019), main="linear Plot")
lines(t,lin_fit$fit,col="red3",lwd=2)
plot(ts_data, xlab="Month", lwd=2, col='skyblue3', xlim=c(2009,2019), main="Quadratic Plot")
lines(t,quad_fit$fit,col="red3",lwd=2)
plot(ts_data, xlab="Month", lwd=2, col='skyblue3', xlim=c(2009,2019), main="Trend Plot")
lines(t,trend_fit$fit,col="red3",lwd=2)
library(forecast)
t <- seq(2009, 2019.1,length=length(ts_data))
lin_fit = tslm(ts_data~t)
quad_fit=tslm(ts_data~t+I(ts_data^2))
trend_fit=tslm(ts_data~trend)
par(mfrow=c(3,1))
plot(ts_data, xlab="Month", lwd=2, col='skyblue3', xlim=c(2009,2019), main="linear Plot")
lines(t,lin_fit$fit,col="red3",lwd=2)
plot(ts_data, xlab="Month", lwd=2, col='skyblue3', xlim=c(2009,2019), main="Quadratic Plot")
lines(t,quad_fit$fit,col="red3",lwd=2)
plot(ts_data, xlab="Month", lwd=2, col='skyblue3', xlim=c(2009,2019), main="Trend Plot")
lines(t,trend_fit$fit,col="red3",lwd=2)
library(forecast)
t <- seq(2009, 2019.1,length=length(ts_data))
lin_fit = tslm(ts_data~t)
quad_fit=tslm(ts_data~t+I(t^2))
trend_fit=tslm(ts_data~trend)
par(mfrow=c(3,1))
plot(ts_data, xlab="Month", lwd=2, col='skyblue3', xlim=c(2009,2019), main="linear Plot")
lines(t,lin_fit$fit,col="red3",lwd=2)
plot(ts_data, xlab="Month", lwd=2, col='skyblue3', xlim=c(2009,2019), main="Quadratic Plot")
lines(t,quad_fit$fit,col="red3",lwd=2)
plot(ts_data, xlab="Month", lwd=2, col='skyblue3', xlim=c(2009,2019), main="Trend Plot")
lines(t,trend_fit$fit,col="red3",lwd=2)
quad_fit_forecast <- forecast.lm(quad_fit, h = 16, level = c(90,95))
quad_fit_forecast <- forecast(quad_fit, h = 16, level = c(90,95))
quad_fit_forecast <- forecast(lin_fit, h = 16, level = c(90,95))
quad_fit_forecast <- forecast(lin_fit, h = 16, level = c(90,95))
library(forecast)
t <- seq(2009, 2019.1,length=length(ts_data))
lin_fit = tslm(ts_data~t)
quad_fit=tslm(ts_data~t+I(t^2))
trend_fit=tslm(ts_data~trend)
par(mfrow=c(3,1))
plot(ts_data, xlab="Month", lwd=2, col='skyblue3', xlim=c(2009,2019), main="linear Plot")
lines(t,lin_fit$fit,col="red3",lwd=2)
plot(ts_data, xlab="Month", lwd=2, col='skyblue3', xlim=c(2009,2019), main="Quadratic Plot")
lines(t,quad_fit$fit,col="red3",lwd=2)
plot(ts_data, xlab="Month", lwd=2, col='skyblue3', xlim=c(2009,2019), main="Trend Plot")
lines(t,trend_fit$fit,col="red3",lwd=2)
quad_fit_forecast <- forecast(lin_fit, h = 16, level = c(90,95))
quad_fit_forecast <- forecast(quad_fit, h = 16, level = c(90,95))
quad_fit_forecast <- forecast(quad_fit, h = 16, level = c(90,95), newdata=data.frame(t=2009:2019.1))
ts_data <- ts(Monthly_data$Attendence, start = c(2009,9), frequency = 12)
plot(ts_data, ylab="Monthly Attendence", xlab="Time (Month)")
plot(diff(log(ts_data)), ylab="Monthly attendence growth rate")
acf(ts_data, lag.max = 90)
pacf(ts_data, lag.max = 90)
library(forecast)
t <- seq(2009, 2019.1,length=length(ts_data))
lin_fit = tslm(ts_data~t)
quad_fit=tslm(ts_data~t+I(t^2))
trend_fit=tslm(ts_data~trend)
par(mfrow=c(3,1))
plot(ts_data, xlab="Month", lwd=2, col='skyblue3', xlim=c(2009,2019), main="linear Plot")
lines(t,lin_fit$fit,col="red3",lwd=2)
plot(ts_data, xlab="Month", lwd=2, col='skyblue3', xlim=c(2009,2019), main="Quadratic Plot")
lines(t,quad_fit$fit,col="red3",lwd=2)
plot(ts_data, xlab="Month", lwd=2, col='skyblue3', xlim=c(2009,2019), main="Trend Plot")
lines(t,trend_fit$fit,col="red3",lwd=2)
par(mfrow=c(2,1))
plot(as.vector(fitted(lin_fit)),as.vector(residuals(lin_fit)), ylab="Residuals",xlab="Fitted Values", main = "Fitted vs Residuals of Linear Fit")
abline(h=0,lwd=2,col = "red3")
plot(as.vector(fitted(quad_fit)),as.vector(residuals(quad_fit)), ylab="Residuals",xlab="Fitted Values", main = "Fitted vs Residuals of Quadratic Fit")
abline(h=0,lwd=2,col = "red3")
par(mfrow=c(2,1))
hist(lin_fit$res,15,col="skyblue3",xlab="Residuals",ylab="Fraction",main="Histogram of Residuals for Linear Model")
hist(quad_fit$res,15,col="skyblue3",xlab="Residuals",ylab="Fraction",main="Histogram of Residuals for Quadratic Model")
summary(lin_fit)
summary(quad_fit)
AIC(lin_fit,quad_fit)
BIC(lin_fit,quad_fit)
quad_fit_forecast <- forecast(quad_fit, h = 16, level = c(90,95), newdata=data.frame(t=2009:2019.1))
plot(quad_fit_forecast,ylab="Monthly Attendence", xlab="Time (Month)", shadecols="oldstyle")
quad_fit_forecast <- forecast(quad_fit, h = 16, level = c(90,95), newdata=data.frame(t=2019:2020.2))
plot(quad_fit_forecast,ylab="Monthly Attendence", xlab="Time (Month)", shadecols="oldstyle")
full_fit_forecast <- forecast(full_fit, h = 16, level = c(90,95), newdata=data.frame(t=2019:2020.2))
plot(full_fit_forecast,ylab="Monthly Attendence", xlab="Time (Month)", shadecols="oldstyle")
full_fit_forecast <- forecast(full_fit, h = 16, level = c(90,95), newdata=data.frame(t=2019:2021))
plot(full_fit_forecast,ylab="Monthly Attendence", xlab="Time (Month)", shadecols="oldstyle")
quad_fit_forecast <- forecast(quad_fit, h = 16, level = c(90,95), newdata=data.frame(t=2019:2021))
plot(quad_fit_forecast,ylab="Monthly Attendence", xlab="Time (Month)", shadecols="oldstyle")
ts_data <- ts(Monthly_data$Attendence, start = c(2009,9), frequency = 12)
plot(ts_data, ylab="Monthly Attendence", xlab="Time (Month)")
plot(diff(log(ts_data)), ylab="Monthly attendence growth rate")
acf(ts_data, lag.max = 90)
pacf(ts_data, lag.max = 90)
library(forecast)
t <- seq(2009, 2019.1,length=length(ts_data))
lin_fit = tslm(ts_data~t)
quad_fit=tslm(ts_data~t+I(t^2))
trend_fit=tslm(ts_data~trend)
par(mfrow=c(3,1))
plot(ts_data, xlab="Month", lwd=2, col='skyblue3', xlim=c(2009,2019), main="linear Plot")
lines(t,lin_fit$fit,col="red3",lwd=2)
plot(ts_data, xlab="Month", lwd=2, col='skyblue3', xlim=c(2009,2019), main="Quadratic Plot")
lines(t,quad_fit$fit,col="red3",lwd=2)
plot(ts_data, xlab="Month", lwd=2, col='skyblue3', xlim=c(2009,2019), main="Trend Plot")
lines(t,trend_fit$fit,col="red3",lwd=2)
par(mfrow=c(2,1))
plot(as.vector(fitted(lin_fit)),as.vector(residuals(lin_fit)), ylab="Residuals",xlab="Fitted Values", main = "Fitted vs Residuals of Linear Fit")
abline(h=0,lwd=2,col = "red3")
plot(as.vector(fitted(quad_fit)),as.vector(residuals(quad_fit)), ylab="Residuals",xlab="Fitted Values", main = "Fitted vs Residuals of Quadratic Fit")
abline(h=0,lwd=2,col = "red3")
par(mfrow=c(2,1))
hist(lin_fit$res,15,col="skyblue3",xlab="Residuals",ylab="Fraction",main="Histogram of Residuals for Linear Model")
hist(quad_fit$res,15,col="skyblue3",xlab="Residuals",ylab="Fraction",main="Histogram of Residuals for Quadratic Model")
summary(lin_fit)
summary(quad_fit)
AIC(lin_fit,quad_fit)
BIC(lin_fit,quad_fit)
quad_fit_forecast <- forecast(quad_fit, h = 16, level = c(90,95), newdata=data.frame(t=2019:20213))
plot(quad_fit_forecast,ylab="Monthly Attendence", xlab="Time (Month)", shadecols="oldstyle")
season_fit <- tslm(ts_data ~ season)
summary(season_fit)
plot(ts_data, xlab="Month", lwd=2, col='skyblue3', xlim=c(2009,2019))
lines(season_fit$fit,col="red3",lwd=2)
full_fit <- tslm(ts_data ~ season + t + I(t^2))
plot(as.vector(fitted(full_fit)),as.vector(residuals(full_fit)), pch = 20, ylab="Residuals",xlab="Fitted", main = "Fitted vs Residuals of Full Fit")
abline(h=0,lwd=2,col = "red3")
summary(full_fit)
accuracy(full_fit)
accuracy(season_fit)
full_fit_forecast <- forecast(full_fit, h = 16, level = c(90,95), newdata=data.frame(t=2019:2021))
plot(full_fit_forecast,ylab="Monthly Attendence", xlab="Time (Month)", shadecols="oldstyle")
quad_fit_forecast <- forecast(quad_fit, h = 16, level = c(90,95), newdata=data.frame(t=2019:2021))
plot(quad_fit_forecast,ylab="Monthly Attendence", xlab="Time (Month)", shadecols="oldstyle")
quad_fit_forecast <- forecast(quad_fit, h = 16, level = c(90,95), newdata=data.frame(t=2019:2022))
plot(quad_fit_forecast,ylab="Monthly Attendence", xlab="Time (Month)", shadecols="oldstyle")
quad_fit_forecast <- forecast(quad_fit, h = 16, level = c(90,95), newdata=data.frame(t=2019:2021))
plot(quad_fit_forecast,ylab="Monthly Attendence", xlab="Time (Month)", shadecols="oldstyle")
quad_fit_forecast <- forecast(quad_fit, h = 16, level = c(90,95), newdata=data.frame(t=seq(2019, 2021,by=(1/12))))
plot(quad_fit_forecast,ylab="Monthly Attendence", xlab="Time (Month)", shadecols="oldstyle")
full_fit_forecast <- forecast(full_fit, h = 16, level = c(90,95), newdata=data.frame(t=t=seq(2019, 2021,by=(1/12))))
full_fit_forecast <- forecast(full_fit, h = 16, level = c(90,95), newdata=data.frame(t=seq(2019, 2021,by=(1/12))))
plot(full_fit_forecast,ylab="Monthly Attendence", xlab="Time (Month)", shadecols="oldstyle")
HoltWinters(ts_data)
plot(ts_data)
lines(HoltWinters(ts_data)$fitted[,1], col="red")
ts_data_hw <- HoltWinters(ts_data)
predict(ts_data_hw, n.ahead = 12)
quartz()
plot(ts_data)
lines(predict(ts_data_hw, n.ahead = 48), col=2)
lines(predict(ts_data_hw, n.ahead = 12), col="red")
rm(ts_data_hw)
# create a time series model from the data set
ts_data <- ts(Monthly_data$Attendence, start = c(2009,9), frequency = 12)
# plot the time series model
plot(ts_data, ylab="Monthly Attendence", xlab="Time (Month)")
# plot the covariance of the time series by taking the first difference of the log of the time series
# the difference of the log of the time series give us the percentage point changes between each point e.g. 0.2 = 20%
plot(diff(log(ts_data)), ylab="Monthly attendence growth rate")
# finding the autocorrelation function of the time series model
acf(ts_data, lag.max = 90)
# finding the partial autocorrelation funciton of the time series model, removing all the information in between time t and t+1
pacf(ts_data, lag.max = 90)
library(forecast)
# Create a sequence to show the length of time
t <- seq(2009, 2019.1,length=length(ts_data))
# Linear fit of data vs time
lin_fit = tslm(ts_data~t)
# Quadratic fit of data vs time
quad_fit=tslm(ts_data~t+I(t^2))
# Plot both fits against the original data
par(mfrow=c(3,1))
plot(ts_data, xlab="Month", lwd=2, col='skyblue3', xlim=c(2009,2019), main="linear Plot")
lines(t,lin_fit$fit,col="red3",lwd=2)
plot(ts_data, xlab="Month", lwd=2, col='skyblue3', xlim=c(2009,2019), main="Quadratic Plot")
lines(t,quad_fit$fit,col="red3",lwd=2)
# Plot Linear and Quadratic model to compare the residuals (predicted) and fitted values (actual)
par(mfrow=c(2,1))
plot(as.vector(fitted(lin_fit)),as.vector(residuals(lin_fit)), ylab="Residuals",xlab="Fitted Values", main = "Fitted vs Residuals of Linear Fit")
abline(h=0,lwd=2,col = "red3")
plot(as.vector(fitted(quad_fit)),as.vector(residuals(quad_fit)), ylab="Residuals",xlab="Fitted Values", main = "Fitted vs Residuals of Quadratic Fit")
abline(h=0,lwd=2,col = "red3")
# Plot the residuals (error amount) or both the linear and quadratic fit
par(mfrow=c(2,1))
hist(lin_fit$res,15,col="skyblue3",xlab="Residuals",ylab="Fraction",main="Histogram of Residuals for Linear Model")
hist(quad_fit$res,15,col="skyblue3",xlab="Residuals",ylab="Fraction",main="Histogram of Residuals for Quadratic Model")
# Run the statistics of both the linear and quadratic fit
summary(lin_fit)
summary(quad_fit)
#AIC and BIC functions to run the AIC and BIC for the linear and quadradic model
AIC(lin_fit,quad_fit)
BIC(lin_fit,quad_fit)
#Forecast the plot of the quadradic fit
#We also need to fit the data using data.frame to reformat the data
quad_fit_forecast <- forecast(quad_fit, level = c(90,95), newdata=data.frame(t=seq(2018, 2021,by=(1/12))))
plot(quad_fit_forecast,ylab="Monthly Attendence", xlab="Time (Month)", shadecols="oldstyle")
#Creating a time series regression and creating the summary information
season_fit <- tslm(ts_data ~ season)
summary(season_fit)
#We can create the seasonal plot by using the plot function of our data, and our fitted values using the
#line function.
plot(ts_data, xlab="Month", lwd=2, col='skyblue3', xlim=c(2009,2019))
lines(season_fit$fit,col="red3",lwd=2)
#Fitting the model with both seasonal coefficients and the quadratic fit from before and plotting the fitted values against the residuals
full_fit <- tslm(ts_data ~ season + t + I(t^2))
plot(as.vector(fitted(full_fit)),as.vector(residuals(full_fit)), pch = 20, ylab="Residuals",xlab="Fitted", main = "Fitted vs Residuals of Full Fit")
abline(h=0,lwd=2,col = "red3")
#summary to see statistics of the model
summary(full_fit)
#showing the error metrics
accuracy(full_fit)
accuracy(season_fit)
#forecasting the full model
full_fit_forecast <- forecast(full_fit, level = c(90,95), newdata=data.frame(t=seq(2018, 2021,by=(1/12))))
plot(full_fit_forecast,ylab="Monthly Attendence", xlab="Time (Month)", shadecols="oldstyle")
#forecasting the full model
full_fit_forecast <- forecast(full_fit, level = c(90,95), newdata=data.frame(t=seq(2019, 2021,by=(1/12))))
plot(full_fit_forecast,ylab="Monthly Attendence", xlab="Time (Month)", shadecols="oldstyle")
#forecasting the full model
full_fit_forecast <- forecast(full_fit, level = c(90,95), newdata=data.frame(t=seq(2019, 2021,by=(1/12))))
plot(full_fit_forecast,ylab="Monthly Attendence", xlab="Time (Month)", shadecols="oldstyle")
abline(full_fit_forecast$fitted)
#forecasting the full model
full_fit_forecast <- forecast(full_fit, level = c(90,95), newdata=data.frame(t=seq(2019, 2021,by=(1/12))))
plot(full_fit_forecast,ylab="Monthly Attendence", xlab="Time (Month)", shadecols="oldstyle")
lines(full_fit_forecast$fitted)
#forecasting the full model
full_fit_forecast <- forecast(full_fit, level = c(90,95), newdata=data.frame(t=seq(2019, 2021,by=(1/12))))
plot(full_fit_forecast,ylab="Monthly Attendence", xlab="Time (Month)", shadecols="oldstyle")
lines(full_fit_forecast$fitted, col="red")
#Fitting the model with both seasonal coefficients and the quadratic fit from before and plotting the fitted values against the residuals
full_fit <- tslm(ts_data ~ season + t + I(t^2))
plot(as.vector(fitted(full_fit)),as.vector(residuals(full_fit)), pch = 20, ylab="Residuals",xlab="Fitted", main = "Fitted vs Residuals of Full Fit")
abline(h=0,lwd=2,col = "red3")
#Forecast the plot of the quadradic fit
#We also need to fit the data using data.frame to reformat the data
quad_fit_forecast <- forecast(quad_fit, level = c(90,95), newdata=data.frame(t=seq(2019, 2021,by=(1/12))))
plot(quad_fit_forecast,ylab="Monthly Attendence", xlab="Time (Month)", shadecols="oldstyle")
#Forecast the plot of the quadradic fit
#We also need to fit the data using data.frame to reformat the data
quad_fit_forecast <- forecast(quad_fit, level = c(90,95), newdata=data.frame(t=seq(2019, 2021,by=(1/12))))
plot(quad_fit_forecast,ylab="Monthly Attendence", xlab="Time (Month)", shadecols="oldstyle")
lines(quad_fit_forecast$fitted, col="red")
# create a time series model from the data set
ts_data <- ts(Monthly_data$Attendence, start = c(2009,9), frequency = 12)
# plot the time series model
plot(ts_data, ylab="Monthly Attendence", xlab="Time (Month)")
# plot the covariance of the time series by taking the first difference of the log of the time series
# the difference of the log of the time series give us the percentage point changes between each point e.g. 0.2 = 20%
plot(diff(log(ts_data)), ylab="Monthly attendence growth rate")
# finding the autocorrelation function of the time series model
acf(ts_data, lag.max = 90)
# finding the partial autocorrelation funciton of the time series model, removing all the information in between time t and t+1
pacf(ts_data, lag.max = 90)
library(forecast)
# Create a sequence to show the length of time
t <- seq(2009, 2019.1,length=length(ts_data))
# Linear fit of data vs time
lin_fit = tslm(ts_data~t)
# Quadratic fit of data vs time
quad_fit=tslm(ts_data~t+I(t^2))
# Plot both fits against the original data
par(mfrow=c(3,1))
plot(ts_data, xlab="Month", lwd=2, col='skyblue3', xlim=c(2009,2019), main="linear Plot")
lines(t,lin_fit$fit,col="red3",lwd=2)
plot(ts_data, xlab="Month", lwd=2, col='skyblue3', xlim=c(2009,2019), main="Quadratic Plot")
lines(t,quad_fit$fit,col="red3",lwd=2)
# Plot Linear and Quadratic model to compare the residuals (predicted) and fitted values (actual)
par(mfrow=c(2,1))
plot(as.vector(fitted(lin_fit)),as.vector(residuals(lin_fit)), ylab="Residuals",xlab="Fitted Values", main = "Fitted vs Residuals of Linear Fit")
abline(h=0,lwd=2,col = "red3")
plot(as.vector(fitted(quad_fit)),as.vector(residuals(quad_fit)), ylab="Residuals",xlab="Fitted Values", main = "Fitted vs Residuals of Quadratic Fit")
abline(h=0,lwd=2,col = "red3")
# Plot the residuals (error amount) or both the linear and quadratic fit
par(mfrow=c(2,1))
hist(lin_fit$res,15,col="skyblue3",xlab="Residuals",ylab="Fraction",main="Histogram of Residuals for Linear Model")
hist(quad_fit$res,15,col="skyblue3",xlab="Residuals",ylab="Fraction",main="Histogram of Residuals for Quadratic Model")
# Run the statistics of both the linear and quadratic fit
summary(lin_fit)
summary(quad_fit)
#AIC and BIC functions to run the AIC and BIC for the linear and quadradic model
AIC(lin_fit,quad_fit)
BIC(lin_fit,quad_fit)
#Forecast the plot of the quadradic fit
#We also need to fit the data using data.frame to reformat the data
quad_fit_forecast <- forecast(quad_fit, level = c(90,95), newdata=data.frame(t=seq(2019, 2021,by=(1/12))))
plot(quad_fit_forecast,ylab="Monthly Attendence", xlab="Time (Month)", shadecols="oldstyle")
lines(quad_fit_forecast$fitted, col="red")
#Creating a time series regression and creating the summary information
season_fit <- tslm(ts_data ~ season)
summary(season_fit)
#We can create the seasonal plot by using the plot function of our data, and our fitted values using the
#line function.
plot(ts_data, xlab="Month", lwd=2, col='skyblue3', xlim=c(2009,2019))
lines(season_fit$fit,col="red3",lwd=2)
#Fitting the model with both seasonal coefficients and the quadratic fit from before and plotting the fitted values against the residuals
full_fit <- tslm(ts_data ~ season + t + I(t^2))
plot(as.vector(fitted(full_fit)),as.vector(residuals(full_fit)), pch = 20, ylab="Residuals",xlab="Fitted", main = "Fitted vs Residuals of Full Fit")
abline(h=0,lwd=2,col = "red3")
#summary to see statistics of the model
summary(full_fit)
#showing the error metrics
accuracy(full_fit)
accuracy(season_fit)
#Fitting the model with both seasonal coefficients and the quadratic fit from before and plotting the fitted values against the residuals
full_fit <- tslm(ts_data ~ season + t + I(t^2))
plot(as.vector(fitted(full_fit)),as.vector(residuals(full_fit)), pch = 20, ylab="Residuals",xlab="Fitted", main = "Fitted vs Residuals of Full Fit")
abline(h=0,lwd=2,col = "red3")
full_fit_forecast
#forecasting the full model
full_fit_forecast <- forecast(full_fit, level = c(90,95))
#forecasting the full model
library(forecast)
full_fit_forecast <- forecast(full_fit, level = c(90,95))
#Here we read in our excel data
library(readxl)
library(forecast)
Monthly_data <- read_excel("PretendCity Daily Attendence.xlsx",
sheet = "Monthly")
# create a time series model from the data set
ts_data <- ts(Monthly_data$Attendence, start = c(2009,9), frequency = 12)
# plot the time series model
plot(ts_data, ylab="Monthly Attendence", xlab="Time (Month)")
# plot the covariance of the time series by taking the first difference of the log of the time series
# the difference of the log of the time series give us the percentage point changes between each point e.g. 0.2 = 20%
plot(diff(log(ts_data)), ylab="Monthly attendence growth rate")
# finding the autocorrelation function of the time series model
acf(ts_data, lag.max = 90)
# finding the partial autocorrelation funciton of the time series model, removing all the information in between time t and t+1
pacf(ts_data, lag.max = 90)
# Create a sequence to show the length of time
t <- seq(2009, 2019.1,length=length(ts_data))
# Linear fit of data vs time
lin_fit = tslm(ts_data~t)
# Quadratic fit of data vs time
quad_fit=tslm(ts_data~t+I(t^2))
# Plot both fits against the original data
par(mfrow=c(3,1))
plot(ts_data, xlab="Month", lwd=2, col='skyblue3', xlim=c(2009,2019), main="linear Plot")
lines(t,lin_fit$fit,col="red3",lwd=2)
plot(ts_data, xlab="Month", lwd=2, col='skyblue3', xlim=c(2009,2019), main="Quadratic Plot")
lines(t,quad_fit$fit,col="red3",lwd=2)
# Plot Linear and Quadratic model to compare the residuals (predicted) and fitted values (actual)
par(mfrow=c(2,1))
plot(as.vector(fitted(lin_fit)),as.vector(residuals(lin_fit)), ylab="Residuals",xlab="Fitted Values", main = "Fitted vs Residuals of Linear Fit")
abline(h=0,lwd=2,col = "red3")
plot(as.vector(fitted(quad_fit)),as.vector(residuals(quad_fit)), ylab="Residuals",xlab="Fitted Values", main = "Fitted vs Residuals of Quadratic Fit")
abline(h=0,lwd=2,col = "red3")
# Plot the residuals (error amount) or both the linear and quadratic fit
par(mfrow=c(2,1))
hist(lin_fit$res,15,col="skyblue3",xlab="Residuals",ylab="Fraction",main="Histogram of Residuals for Linear Model")
hist(quad_fit$res,15,col="skyblue3",xlab="Residuals",ylab="Fraction",main="Histogram of Residuals for Quadratic Model")
# Run the statistics of both the linear and quadratic fit
summary(lin_fit)
summary(quad_fit)
#AIC and BIC functions to run the AIC and BIC for the linear and quadradic model
AIC(lin_fit,quad_fit)
BIC(lin_fit,quad_fit)
#Forecast the plot of the quadradic fit
#We also need to fit the data using data.frame to reformat the data
quad_fit_forecast <- forecast(quad_fit, level = c(90,95), newdata=data.frame(t=seq(2019, 2021,by=(1/12))))
plot(quad_fit_forecast,ylab="Monthly Attendence", xlab="Time (Month)", shadecols="oldstyle")
lines(quad_fit_forecast$fitted, col="red")
#Creating a time series regression and creating the summary information
season_fit <- tslm(ts_data ~ season)
summary(season_fit)
#We can create the seasonal plot by using the plot function of our data, and our fitted values using the
#line function.
plot(ts_data, xlab="Month", lwd=2, col='skyblue3', xlim=c(2009,2019))
lines(season_fit$fit,col="red3",lwd=2)
#Fitting the model with both seasonal coefficients and the quadratic fit from before and plotting the fitted values against the residuals
full_fit <- tslm(ts_data ~ season + t + I(t^2))
plot(as.vector(fitted(full_fit)),as.vector(residuals(full_fit)), pch = 20, ylab="Residuals",xlab="Fitted", main = "Fitted vs Residuals of Full Fit")
abline(h=0,lwd=2,col = "red3")
#summary to see statistics of the model
summary(full_fit)
#showing the error metrics
accuracy(full_fit)
accuracy(season_fit)
#forecasting the full model
library(forecast)
full_fit_forecast <- forecast(full_fit, level = c(90,95), newdata=data.frame(t=seq(2019, 2021,by=(1/12))))
plot(full_fit_forecast,ylab="Monthly Attendence", xlab="Time (Month)", shadecols="oldstyle")
# red line indicate the fitted model
# black line indicate the original data
lines(full_fit_forecast$fitted, col="red")
# this is the prediction of monthly attendence numbers with 90% and 95% confidence interval
full_fit_forecast
